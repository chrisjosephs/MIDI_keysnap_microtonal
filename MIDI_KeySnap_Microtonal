/*******************************************************************************
* Copyright 2007 - 2011, Philip S. Considine                                 *
* Modified by: Christopher Josephs                                           *
* This program is free software: you can redistribute it and/or modify     *
* it under the terms of the GNU General Public License as published by     *
* the Free Software Foundation, either version 3 of the License, or        *
* (at your option) any later version.                                      *
* *
* This program is distributed in the hope that it will be useful,          *
* but WITHOUT ANY WARRANTY; without even the implied warranty of           *
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the             *
* GNU General Public License (http://www.gnu.org/licenses/)for more details.*
*******************************************************************************/

desc: MIDI Snap To Key Microtonal [by IXix w/microtonal support added by crimzonclotta]
//tags: MIDI processing mapping
//author: IXix, crimzonclotta
slider1:0<0,16,1{All, 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16}>Input Channel

slider2:0<0,127,1>Note Min
slider3:127<0,127,1>Note Max

// Note min/max (names) (disabled)
//slider2:0<0,127,1{C0,C#0,D0,D#0,E0,F0,F#0,G0,G#0,A0,A#0,B0,C1,C#1,D1,D#1,E1,F1,F#1,G1,G#1,A1,A#1,B1,C2,C#2,D2,D#2,E2,F2,F#2,G2,G#2,A2,A#2,B2,C3,C#3,D3,D#3,E3,F3,F#3,G3,G#3,A3,A#3,B3,C4,C#4,D4,D#4,E4,F4,F#4,G4,G#4,A4,A#4,B4,C5,C#5,D5,D#5,E5,F5,F#5,G5,G#5,A5,A#5,B5,C6,C#6,D6,D#6,E6,F6,F#6,G6,G#6,A6,A#6,B6,C7,C#7,D7,D#7,E7,F7,F#7,G7,G#7,A7,A#7,B7,C8,C#8,D8,D#8,E8,F8,F#8,G8,G#8,A8,A#8,B8,C9,C#9,D9,D#9,E9,F9,F#9,G9,G#9,A9,A#9,B9,C10,C#10,D10,D#10,E10,F10,F#10,G10}>Note Min
//slider3:127<0,127,1{C0,C#0,D0,D#0,E0,F0,F#0,G0,G#0,A0,A#0,B0,C1,C#1,D1,D#1,E1,F1,F#1,G1,G#1,A1,A#1,B1,C2,C#2,D2,D#2,E2,F2,F#2,G2,G#2,A2,A#2,B2,C3,C#3,D3,D#3,E3,F3,F#3,G3,G#3,A3,A#3,B3,C4,C#4,D4,D#4,E4,F4,F#4,G4,G#4,A4,A#4,B4,C5,C#5,D5,D#5,E5,F5,F#5,G5,G#5,A5,A#5,B5,C6,C#6,D6,D#6,E6,F6,F#6,G6,G#6,A6,A#6,B6,C7,C#7,D7,D#7,E7,F7,F#7,G7,G#7,A7,A#7,B7,C8,C#8,D8,D#8,E8,F8,F#8,G8,G#8,A8,A#8,B8,C9,C#9,D9,D#9,E9,F9,F#9,G9,G#9,A9,A#9,B9,C10,C#10,D10,D#10,E10,F10,F#10,G10}>Note Max
slider4:60<0,127,1>Root MIDI Note (0-127)
slider5:/midi_keysnap_microtonal:none:Scale File
slider6:1<0,1,1{Block,Remap}>Mode
slider7:1<0,1,1{Off,On}>On/Off

in_pin:none
out_pin:none

////////////////////////////////////////////////////////////////////////////////
@init

// Memory offsets
inputTracker = 0;
noteMap = 128;
scale = 1024;
edoSteps = 2048;

// MIDI constants
statNoteOn = $x90;
statNoteOff = $x80;

// File change flag
scaleFile = -1;

// Initialize root here (only once when plugin loads)
last_root_slider_val = -1; // Use a flag to detect changes in slider4
root = slider4; // Initialize with the default slider value from slider4

////////////////////////////////////////////////////////////////////////////////
@slider

slider2 = min(max(slider2 | 0, 0), 127);   // Remove fractions and clamp to legal range
slider3 = min(max(slider3 | 0, 0), 127);
slider4 = min(max(slider4 | 0, 0), 127);
inChannel = slider1;
noteMin = slider2;
noteMax = slider3;

// Only update root if slider4 has changed, to avoid constant resetting
last_root_slider_val != slider4 ?
(
  root = slider4;
  last_root_slider_val = slider4;
);

mode = slider6;
on = slider7;

//Load scale
scaleFile != slider5 ?
(
  scaleFile = slider5;
  scaleSize = 0;
  fileHandle = file_open(slider5);
  fileHandle > 0 ?
  (
    file_var(fileHandle, edoSteps); // First line is the number of steps in the EDO (e.g., 31)

    while (file_avail(fileHandle)) // Keep looping as long as there's data left
    (
      file_var(fileHandle, scale[scaleSize]); // Read the next value
      scaleSize += 1; // Increment scaleSize for the next element
    );
    file_close(fileHandle);
  ) : scaleFile = -1;
);

////////////////////////////////////////////////////////////////////////////////
@block

while
(
  midirecv(offset, msg1, msg23) ?
  (
    passThru = 1; // Assume note is good

    // Extract message type and channel
    status = msg1 & $xF0;
    channel = msg1 & $x0F;

    // Is it on our channel and are we working?
    (channel == inChannel && on) || inChannel == 0  ?
    (
      // Is it a note event?
      (status == statNoteOn || status == statNoteOff) ?
      (
        // Extract note number and velocity
        note = msg23 & $x7F;
        velocity = msg23 >> 8;

        // Is it in our note range?
        !(note < noteMin || note > noteMax) ?
        (
          // What kind of note event?
          status == statNoteOn && velocity > 0 ? // Note on (zero velocity is considered to be a note off)
          (
            // If note not already on
            inputTracker[note] == 0 ?
            (
              // Calculate the input note's MIDI value relative to the chosen root.
              // This can be negative if the input note is below the root.
              relative_note_from_root = note - root;

              // Determine which 'edoSteps'-octave the input note falls into, relative to the root.
              // This will be an integer, can be negative.
              octave_offset = (relative_note_from_root / edoSteps) | 0; // Corrected line

              // Determine the input note's position *within a single 'edoSteps' octave*,
              // relative to the root. This is the 'scale step' for comparison.
              relNote_for_mapping = relative_note_from_root % edoSteps;

              // Ensure relNote_for_mapping is always positive (0 to edoSteps - 1).
              relNote_for_blocking = relNote_for_mapping;
              relative_note_from_root < 0 ? (relNote_for_blocking = edoSteps - relNote_for_mapping);
              relNote_for_mapping < 0 ? relNote_for_mapping += edoSteps;
              // Is it in key (i.e., is relNote_for_mapping one of the defined scale steps)?
              i = okay = 0;
              while
              (
                relNote_for_blocking == scale[i] ? okay = 1;
                (i += 1) < scaleSize; // Loop while 'i' is a valid index
              );

              okay == 0 ? // Bad note (not in key)
              (
                mode == 1 ? // Remap mode
                (
                  nearest = -1;
                  minDistance = 1000;

                  relNote = note - root;

                  i = 0;
                  while (i < scaleSize)
                  (
                    // Scan across multiple octaves of the scale (Â±3)
                    offset = -3;
                    while (offset <= 3)
                    (
                      candidate = root + (offset * edoSteps) + scale[i];
                      dist = abs(candidate - note);
                      dist < minDistance ? (
                        minDistance = dist;
                        nearest = candidate;
                      );
                      offset += 1;
                    );
                    i += 1;
                  );
                  nearest == -1 ? (
                    nearest = root + scale[0]; // Default to lowest in-scale note
                  );

                  inputTracker[note] = 2;
                  noteMap[note] = nearest;
                  msg23 = nearest | (velocity << 8); // Modify MIDI data
                )
                : // Block mode: do not pass this note
                (
                  passThru = 0;
                );
              )
              : // Good note (in key)
              (
                inputTracker[note] = 1; // Mark note as active and unmodified
              );
            )
            :
            (
              // Note already active (either modified or good), so block the message if it's a re-trigger
              passThru = 0;
            );
          )
          : // Note off
          (
            // Is the note active (was it a previously tracked note-on)?
            inputTracker[note] > 0 ?
            (
              // Was it a modified note-on (i.e., snapped to a different note)?
              inputTracker[note] == 2 ?
              (
                msg23 = noteMap[note] | (velocity << 8); // Send note-off for the *remapped* note
                // noteMap[note] = note; // No need to reset here, it will be overwritten on next note-on
              );

              inputTracker[note] = 0; // Mark note as inactive
            );
          );
        );
      );
    );

    // Pass message on if necessary
    passThru ?
    (
      midisend(offset, msg1, msg23);
    );

    1; // Force loop to continue until all messages have been processed
  );
);

